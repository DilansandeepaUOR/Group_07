import { useState } from 'react';
import { jsPDF } from 'jspdf';
import axios from 'axios';
import { FaSearch, FaFilePdf } from 'react-icons/fa';
import autoTable from 'jspdf-autotable';
import logo from '../assets/logo.png';


const PetRecordPDF = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [owners, setOwners] = useState([]);
  const [selectedOwner, setSelectedOwner] = useState(null);
  const [pets, setPets] = useState([]);
  const [selectedPet, setSelectedPet] = useState(null);
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(false);
  const [setShowPetSelection] = useState(false);

  // Database connection config
  const dbConfig = {
    host: 'localhost',
    user: 'fourpaws_user',
    password: '1234',
    database: 'fourpaws_db'
  };

  // Search owners by name
 // Update all your API calls to use '/api' prefix
const searchOwners = async () => {
  if (!searchTerm.trim()) return;
  
  setLoading(true);
  try {
    const response = await axios.post('http://localhost:3001/api/search-owners', {
      searchTerm // Removed dbConfig from here
    });
    setOwners(response.data);
  } catch (error) {
    console.error('Error searching owners:', error);
    alert('Error searching owners: ' + (error.response?.data?.error || error.message));
  } finally {
    setLoading(false);
  }
};

  // Get pets for selected owner
  const getPetsByOwner = async (ownerId) => {
    setLoading(true);
    try {
      const response = await axios.post('http://localhost:3001/api/get-pets', {
        ownerId,
        dbConfig
      });
      setPets(response.data);
    } catch (error) {
      console.error('Error fetching pets:', error);
      alert('Error fetching pets');
    } finally {
      setLoading(false);
    }
  };

  // Get records for selected pet
  const getPetRecords = async (petId) => {
    setLoading(true);
    try {
      const response = await axios.post('http://localhost:3001/api/get-records', {
        petId,
        dbConfig
      });
      setRecords(response.data);
    } catch (error) {
      console.error('Error fetching records:', error);
      alert('Error fetching records');
    } finally {
      setLoading(false);
    }
  };

  // Generate PDF
  const generatePDF = () => {
    if (!selectedOwner || !selectedPet || records.length === 0) {
      alert('No records found for selected pet');
      return;
    }
  
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
  
      // Add logo
      doc.addImage(logo, 'PNG', pageWidth - 40, 10, 30, 15);
  
      // Title
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.text('Four Paws Animal Clinic and Surgery Medical Report', 12, 20);
  
      // Owner and Pet Info
      doc.setFontSize(12);
      doc.text(`Owner: ${selectedOwner.Owner_name}`, 14, 30);
      doc.text(`Email: ${selectedOwner.E_mail}`, 14, 36);
      doc.text(`Pet: ${selectedPet.Pet_name} (${selectedPet.Pet_type})`, 14, 42);
  
      // Medical Records Table
      autoTable(doc, {
        startY: 55,
        head: [['Date', 'Surgery', 'Vaccination', 'Other']],
        body: records.map(record => [
          record.date ? new Date(record.date).toLocaleDateString() : 'N/A',
          record.surgery || '-',
          record.vaccination || '-',
          record.other || '-'
        ]),
        theme: 'grid',
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 10
        }
      });
  
      // Footer
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text('Generated by Four Paws Animal Clinic', pageWidth / 2, doc.internal.pageSize.height - 10, {
        align: 'center'
      });
  
      // Save PDF
      const fileName = `Pet_Record_${selectedOwner.Owner_name.replace(/[^a-z0-9]/gi, '_')}_${selectedPet.Pet_name.replace(/[^a-z0-9]/gi, '_')}.pdf`;
      doc.save(fileName);
    } catch (error) {
      alert(`Failed to generate PDF: ${error.message}`);
    } finally {
      setShowPetSelection(false);
    }
  };
  

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">Generate Medical Record PDF</h1>
      
      {/* Search Section */}
      <div className="mb-6">
        <div className="flex gap-2 mb-4">
          <input
            type="text"
            placeholder="Search owner by name"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 p-2 border rounded"
          />
          <button
            onClick={searchOwners}
            disabled={loading || !searchTerm.trim()}
            className="bg-blue-500 text-white p-2 rounded flex items-center gap-2"
          >
            <FaSearch /> Search
          </button>
        </div>
        
        {/* Owners List */}
        {owners.length > 0 && (
          <div className="mb-4">
            <h2 className="font-semibold mb-2">Select Owner:</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {owners.map(owner => (
                <div
                  key={owner.Owner_id}
                  onClick={() => {
                    setSelectedOwner(owner);
                    setSelectedPet(null);
                    setRecords([]);
                    getPetsByOwner(owner.Owner_id);
                  }}
                  className={`p-3 border rounded cursor-pointer hover:bg-gray-50 ${
                    selectedOwner?.Owner_id === owner.Owner_id ? 'bg-blue-50 border-blue-300' : ''
                  }`}
                >
                  <p className="font-medium">{owner.Owner_name}</p>
                  <p className="text-sm text-gray-600">{owner.E_mail}</p>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Pets List */}
        {selectedOwner && pets.length > 0 && (
          <div className="mb-4">
            <h2 className="font-semibold mb-2">Select Pet:</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {pets.map(pet => (
                <div
                  key={pet.Pet_id}
                  onClick={async () => {
                    setSelectedPet(pet);
                    await getPetRecords(pet.Pet_id);
                  }}
                  className={`p-3 border rounded cursor-pointer hover:bg-gray-50 ${
                    selectedPet?.Pet_id === pet.Pet_id ? 'bg-blue-50 border-blue-300' : ''
                  }`}
                >
                  <p className="font-medium">{pet.Pet_name}</p>
                  <p className="text-sm text-gray-600">{pet.Pet_type}</p>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Records Preview */}
        {selectedPet && records.length > 0 && (
          <div className="mb-6">
            <h2 className="font-semibold mb-2">Records for {selectedPet.Pet_name}:</h2>
            <div className="border rounded p-4 max-h-60 overflow-y-auto">
              {records.map((record, index) => (
                <div key={record.id} className="mb-4 pb-4 border-b last:border-b-0">
                  <p className="font-medium">Record #{index + 1} - {new Date(record.date).toLocaleDateString()}</p>
                  {record.surgery && <p>Surgery: {record.surgery}</p>}
                  {record.vaccination && <p>Vaccination: {record.vaccination}</p>}
                  {record.other && <p>Other: {record.other}</p>}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
      
      {/* Generate PDF Button */}
      {selectedPet && records.length > 0 && (
        <div className="flex justify-center">
          <button
            onClick={generatePDF}
            className="bg-green-600 text-white px-4 py-2 rounded flex items-center gap-2 hover:bg-green-700"
          >
            <FaFilePdf /> Generate PDF
          </button>
        </div>
      )}
      
      {loading && (
        <div className="text-center py-4">
          <p>Loading...</p>
        </div>
      )}
    </div>
  );
};

export default PetRecordPDF;