import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../Components/ui/SearchRecords.css';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import logo from '../assets/logo.png'; 

const SearchRecords = () => {
    const [ownerName, setOwnerName] = useState('');
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showOwnerSelection, setShowOwnerSelection] = useState(false);
  const [showPetSelection, setShowPetSelection] = useState(false);
  const [selectedOwner, setSelectedOwner] = useState('');
  const [selectedPet, setSelectedPet] = useState('');
  const [groupedData, setGroupedData] = useState({});
  const navigate = useNavigate();

  const handleSearch = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch(
        `http://localhost:3001/record/search?owner=${encodeURIComponent(ownerName)}`,
        {
          headers: {
            'Accept': 'application/json'
          }
        }
      );
  
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`Server returned ${response.status}`);
      }
  
      const data = await response.json();
      console.log('API data:', data);
      
      setResults(Array.isArray(data) ? data : []);
      
    } catch (error) {
      console.error('Full error:', error);
      setError(`Search failed: ${error.message}`);
      setResults([]);
    } finally {
      setIsLoading(false);
    }
  };

  const groupRecordsByOwnerAndPet = () => {
    const grouped = {};
    results.forEach(record => {
      if (!grouped[record.owner_name]) {
        grouped[record.owner_name] = {};
      }
      if (!grouped[record.owner_name][record.pet_name]) {
        grouped[record.owner_name][record.pet_name] = [];
      }
      grouped[record.owner_name][record.pet_name].push(record);
    });
    return grouped;
  };

  const handleGeneratePDF = () => {
    const grouped = groupRecordsByOwnerAndPet();
    setGroupedData(grouped);
    const owners = Object.keys(grouped);
    
    if (owners.length === 1) {
      const pets = Object.keys(grouped[owners[0]]);
      if (pets.length === 1) {
        generatePDF(owners[0], pets[0]);
      } else {
        setSelectedOwner(owners[0]);
        setShowPetSelection(true);
      }
    } else {
      setShowOwnerSelection(true);
    }
  };

  const handleOwnerSelect = (owner) => {
    setSelectedOwner(owner);
    setShowOwnerSelection(false);
    setShowPetSelection(true);
  };

  const generatePDF = (owner, pet) => {
    const records = groupedData[owner]?.[pet];
    
    if (!records || records.length === 0) {
      alert('No records found for selected pet');
      return;
    }

    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      
      // Add logo
      const imgWidth = 30;
      const imgHeight = 15;
      doc.addImage(logo, 'PNG', pageWidth - imgWidth - 10, 10, imgWidth, imgHeight);

      // Title and info
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.text('Pet Service Record', 14, 20);
      doc.setFontSize(12);
      doc.text(`Owner: ${owner}`, 14, 30);
      doc.text(`Pet: ${pet}`, 14, 40);

      // Create table data
      const tableData = records.map(record => [
        record.date ? new Date(record.date).toLocaleDateString() : 'N/A',
        record.surgery || '-',
        record.vaccination || '-',
        record.other || '-'
      ]);

      // Add table
      autoTable(doc, {
        startY: 50,
        head: [['Date', 'Surgery', 'Vaccination', 'Other']],
        body: tableData,
        theme: 'grid',
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 10,
          cellPadding: 4,
          overflow: 'linebreak'
        },
        margin: { left: 14 }
      });

      // Footer
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text('Generated by Four Paws Animal Clinic', 
              pageWidth / 2, 
              doc.internal.pageSize.height - 10, 
              { align: 'center' });

      doc.save(`Pet_Record_${owner.replace(/[^a-z0-9]/gi, '_')}_${pet.replace(/[^a-z0-9]/gi, '_')}.pdf`);
      
    } catch (error) {
      console.error('PDF Generation Error:', error);
      alert(`Failed to generate PDF: ${error.message}`);
    } finally {
      setShowPetSelection(false);
    }
  };

  return (
    <div className="search-page">
      <div className="search-card">
        <h2 className="search-title">Search Pet Records</h2>
        
        <div className="search-controls">
          <div className="search-input-group">
            <input
              type="text"
              value={ownerName}
              onChange={(e) => setOwnerName(e.target.value)}
              placeholder="Enter owner name..."
              className="search-input"
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            />
            <button 
              onClick={handleSearch} 
              className="search-button"
              disabled={isLoading}
            >
              {isLoading ? 'Searching...' : (
                <>
                  <i className="search-icon">üîç</i> Search
                </>
              )}
            </button>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="error-message">
            Error: {error}
          </div>
        )}

        {/* Debug Output */}
        <div className="debug-info">
          <small>Searching for: "{ownerName}"</small>
          <small>Found {results.length} records</small>
        </div>

        {results.length > 0 ? (
          <div className="results-container">
            <table className="results-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Owner</th>
                  <th>Pet</th>
                  <th>Date</th>
                  <th>Surgery</th>
                  <th>Vaccination</th>
                  <th>Other</th>
                </tr>
              </thead>
              <tbody>
                {results.map((record) => (
                  <tr key={record.id} className="record-row">
                    <td>{record.id}</td>
                    <td>{record.owner_name || 'N/A'}</td>
                    <td>{record.pet_name || 'N/A'}</td>
                    <td>{record.date ? new Date(record.date).toLocaleDateString() : 'N/A'}</td>
                    <td>{record.surgery || 'N/A'}</td>
                    <td>{record.vaccination || 'N/A'}</td>
                    <td>{record.other || 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="no-results">
            {ownerName 
              ? (isLoading ? 'Searching...' : 'No records found') 
              : 'Enter an owner name to search'}
          </div>
        )}

        <div className="action-buttons">
          <button 
            onClick={() => navigate('/records')} 
            className="back-button"
          >
            ‚Üê Back to All Records
          </button>
          <button 
            onClick={handleGeneratePDF} 
            className="pdf-button"
            disabled={results.length === 0}
          >
            Generate PDF Report
          </button>

        </div>
        {/* Owner Selection Modal */}
        {showOwnerSelection && (
          <div className="modal-overlay">
            <div className="modal-content">
              <h3>Select Owner</h3>
              <div className="owner-list">
                {Object.keys(groupedData).map(owner => (
                  <div 
                    key={owner} 
                    className={`owner-item ${selectedOwner === owner ? 'selected' : ''}`}
                    onClick={() => handleOwnerSelect(owner)}
                  >
                    {owner}
                  </div>
                ))}
              </div>
              <div className="modal-actions">
                <button 
                  onClick={() => setShowOwnerSelection(false)}
                  className="modal-cancel"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Pet Selection Modal */}
        {showPetSelection && (
          <div className="modal-overlay">
            <div className="modal-content">
              <h3>Select Pet for {selectedOwner}</h3>
              <div className="pet-list">
                {Object.keys(groupedData[selectedOwner] || {}).map(pet => (
                  <div 
                    key={pet} 
                    className={`pet-item ${selectedPet === pet ? 'selected' : ''}`}
                    onClick={() => {
                      setSelectedPet(pet);
                      generatePDF(selectedOwner, pet);
                    }}
                  >
                    {pet}
                  </div>
                ))}
              </div>
              <div className="modal-actions">
                <button 
                  onClick={() => setShowPetSelection(false)}
                  className="modal-cancel"
                >
                  Back
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SearchRecords;