import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../Components/ui/SearchRecords.css';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import logo from '../assets/logo.png'; 

const SearchRecords = () => {
    const [ownerName, setOwnerName] = useState('');
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showOwnerSelection, setShowOwnerSelection] = useState(false);
  const [showPetSelection, setShowPetSelection] = useState(false);
  const [selectedOwner, setSelectedOwner] = useState('');
  const [selectedPet, setSelectedPet] = useState('');
  const [groupedData, setGroupedData] = useState({});
  const navigate = useNavigate();

  const handleSearch = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch(
        `http://localhost:3001/record/search?owner=${encodeURIComponent(ownerName)}`,
        {
          headers: {
            'Accept': 'application/json'
          }
        }
      );
  
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`Server returned ${response.status}`);
      }
  
      const data = await response.json();
      console.log('API data:', data);
      
      setResults(Array.isArray(data) ? data : []);
      
    } catch (error) {
      console.error('Full error:', error);
      setError(`Search failed: ${error.message}`);
      setResults([]);
    } finally {
      setIsLoading(false);
    }
  };

  const groupRecordsByOwnerAndPet = () => {
    const grouped = {};
    results.forEach(record => {
      if (!grouped[record.owner_name]) {
        grouped[record.owner_name] = {};
      }
      if (!grouped[record.owner_name][record.pet_name]) {
        grouped[record.owner_name][record.pet_name] = [];
      }
      grouped[record.owner_name][record.pet_name].push(record);
    });
    return grouped;
  };

  const handleGeneratePDF = () => {
    const grouped = groupRecordsByOwnerAndPet();
    setGroupedData(grouped);
    const owners = Object.keys(grouped);
    
    if (owners.length === 1) {
      const pets = Object.keys(grouped[owners[0]]);
      if (pets.length === 1) {
        generatePDF(owners[0], pets[0]);
      } else {
        setSelectedOwner(owners[0]);
        setShowPetSelection(true);
      }
    } else {
      setShowOwnerSelection(true);
    }
  };

  const handleOwnerSelect = (owner) => {
    setSelectedOwner(owner);
    setShowOwnerSelection(false);
    setShowPetSelection(true);
  };

  const generatePDF = (owner, pet) => {
    const records = groupedData[owner]?.[pet];
    
    if (!records || records.length === 0) {
      alert('No records found for selected pet');
      return;
    }

    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      
      // Add logo
      const imgWidth = 30;
      const imgHeight = 15;
      doc.addImage(logo, 'PNG', pageWidth - imgWidth - 10, 10, imgWidth, imgHeight);

      // Title and info
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.text('Pet Service Record', 14, 20);
      doc.setFontSize(12);
      doc.text(`Owner: ${owner}`, 14, 30);
      doc.text(`Pet: ${pet}`, 14, 40);

      // Create table data
      const tableData = records.map(record => [
        record.date ? new Date(record.date).toLocaleDateString() : 'N/A',
        record.surgery || '-',
        record.vaccination || '-',
        record.other || '-'
      ]);

      // Add table
      autoTable(doc, {
        startY: 50,
        head: [['Date', 'Surgery', 'Vaccination', 'Other']],
        body: tableData,
        theme: 'grid',
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 10,
          cellPadding: 4,
          overflow: 'linebreak'
        },
        margin: { left: 14 }
      });

      // Footer
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text('Generated by Four Paws Animal Clinic', 
              pageWidth / 2, 
              doc.internal.pageSize.height - 10, 
              { align: 'center' });

      doc.save(`Pet_Record_${owner.replace(/[^a-z0-9]/gi, '_')}_${pet.replace(/[^a-z0-9]/gi, '_')}.pdf`);
      
    } catch (error) {
      console.error('PDF Generation Error:', error);
      alert(`Failed to generate PDF: ${error.message}`);
    } finally {
      setShowPetSelection(false);
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-white rounded-lg shadow-md mt-10">
  <h2 className="text-2xl font-bold text-gray-800 mb-6">Search Pet Records</h2>
  
  <div className="flex flex-wrap gap-3 mb-6">
    <button 
      onClick={() => navigate('/records')} 
      className="px-5 py-2.5 bg-gradient-to-r from-red-500 to-red-400 text-white font-medium rounded-lg hover:from-red-600 hover:to-red-500 transition-all duration-300 active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-red-300"
    >
      ‚Üê Back to All Records
    </button>
  </div>

  <div className="space-y-6">
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
      <div className="space-y-2">
        <label className="block text-gray-700">Owner Name:</label>
        <input
          type="text"
          value={ownerName}
          onChange={(e) => setOwnerName(e.target.value)}
          placeholder="Enter owner name..."
          className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
        />
      </div>
      
      <button 
        onClick={handleSearch} 
        className={`px-4 py-2 text-white rounded transition flex items-center gap-2 justify-center ${
          isLoading ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'
        }`}
        disabled={isLoading}
      >
        {isLoading ? (
          'Searching...'
        ) : (
          <>
            <span>üîç</span> Search Records
          </>
        )}
      </button>
      
      <button 
        onClick={handleGeneratePDF} 
        className={`px-4 py-2 rounded transition flex items-center gap-2 justify-center ${
          results.length === 0 
            ? 'bg-gray-400 cursor-not-allowed' 
            : 'bg-green-500 hover:bg-green-600 text-white'
        }`}
        disabled={results.length === 0}
      >
        Generate PDF Report
      </button>
    </div>

    {error && (
      <div className="p-3 bg-red-100 text-red-700 rounded">
        Error: {error}
      </div>
    )}

    <div className="text-sm text-gray-500">
      <p>Searching for: "{ownerName}"</p>
      <p>Found {results.length} records</p>
    </div>

    {results.length > 0 ? (
      <div className="overflow-x-auto">
        <table className="min-w-full border-collapse">
          <thead>
            <tr className="bg-gray-100">
              <th className="p-2 border text-left">ID</th>
              <th className="p-2 border text-left">Owner</th>
              <th className="p-2 border text-left">Pet</th>
              <th className="p-2 border text-left">Date</th>
              <th className="p-2 border text-left">Surgery</th>
              <th className="p-2 border text-left">Vaccination</th>
              <th className="p-2 border text-left">Other</th>
            </tr>
          </thead>
          <tbody>
            {results.map((record) => (
              <tr key={record.id} className="hover:bg-gray-50">
                <td className="p-2 border">{record.id}</td>
                <td className="p-2 border">{record.owner_name || 'N/A'}</td>
                <td className="p-2 border">{record.pet_name || 'N/A'}</td>
                <td className="p-2 border">{record.date ? new Date(record.date).toLocaleDateString() : 'N/A'}</td>
                <td className="p-2 border">{record.surgery || 'N/A'}</td>
                <td className="p-2 border">{record.vaccination || 'N/A'}</td>
                <td className="p-2 border">{record.other || 'N/A'}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    ) : (
      <div className="p-4 text-center text-gray-600">
        {ownerName 
          ? (isLoading ? 'Searching...' : 'No records found') 
          : 'Enter an owner name to search'}
      </div>
    )}
  </div>

  {/* Owner Selection Modal */}
  {showOwnerSelection && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 className="text-xl font-bold mb-4">Select Owner</h3>
        <div className="max-h-60 overflow-y-auto mb-4">
          {Object.keys(groupedData).map(owner => (
            <div 
              key={owner} 
              className={`p-3 mb-2 cursor-pointer rounded ${
                selectedOwner === owner ? 'bg-blue-100 border border-blue-300' : 'hover:bg-gray-100'
              }`}
              onClick={() => handleOwnerSelect(owner)}
            >
              {owner}
            </div>
          ))}
        </div>
        <div className="flex justify-end">
          <button 
            onClick={() => setShowOwnerSelection(false)}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  )}

  {/* Pet Selection Modal */}
  {showPetSelection && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 className="text-xl font-bold mb-4">Select Pet for {selectedOwner}</h3>
        <div className="max-h-60 overflow-y-auto mb-4">
          {Object.keys(groupedData[selectedOwner] || {}).map(pet => (
            <div 
              key={pet} 
              className={`p-3 mb-2 cursor-pointer rounded ${
                selectedPet === pet ? 'bg-blue-100 border border-blue-300' : 'hover:bg-gray-100'
              }`}
              onClick={() => {
                setSelectedPet(pet);
                generatePDF(selectedOwner, pet);
              }}
            >
              {pet}
            </div>
          ))}
        </div>
        <div className="flex justify-end">
          <button 
            onClick={() => setShowPetSelection(false)}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
          >
            Back
          </button>
        </div>
      </div>
    </div>
  )}
</div>
  );
};

export default SearchRecords;